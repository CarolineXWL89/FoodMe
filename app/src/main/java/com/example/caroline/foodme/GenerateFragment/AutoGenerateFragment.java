package com.example.caroline.foodme.GenerateFragment;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.example.caroline.foodme.API_Interfaces.DataMuseNutritionIngr;
import com.example.caroline.foodme.API_Interfaces.DataMuseNutritionSearch;
import com.example.caroline.foodme.EdamamNutritionKeys;
import com.example.caroline.foodme.EdamamObjects.EntitySearch;
import com.example.caroline.foodme.EdamamObjects.Hints;
import com.example.caroline.foodme.EdamamObjects.NutritionResponse;
import com.example.caroline.foodme.EdamamObjects.fooddotjson;
import com.example.caroline.foodme.InputFoodsAdapter;
import com.example.caroline.foodme.R;
import com.example.caroline.foodme.RecyclerViewOnClick;

import java.util.ArrayList;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class AutoGenerateFragment extends AppCompatActivity {

    private Button randomGenButton, inputCreateButton;
    private EditText inputIngrTextView;
    private LinearLayout inputtedListLinLayout;
    private View view;
    private RecyclerView recyclerView;
    private RecyclerView.Adapter adapter;
    private RecyclerView.LayoutManager layoutManager;

    //TODO do we need LayoutInflater and View

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_auto_generate_fragment);

        final ArrayList<EntitySearch> entitySearches;
        wireWidgets();

        //holds list of the return info from searching for a food
//        final ArrayList<EntitySearch> entitySearches = new ArrayList<>();
//        String foodSearched = ""; //what we want to search for --> gotten from TextEdit
//
//        Retrofit retrofit = new Retrofit.Builder()
//                .baseUrl(DataMuseNutritionIngr.baseURL)
//                .addConverterFactory(GsonConverterFactory.create())
//                .build();
//        //
//        DataMuseNutritionIngr api = retrofit.create(DataMuseNutritionIngr.class);
//
//
//        Call<ArrayList<EntitySearch>> call = api.getIngrNutrient(foodSearched, EdamamNutritionKeys.APP_ID_NUTRITION, EdamamNutritionKeys.APP_KEY_NUTRITION);
//
//        call.enqueue(new Callback<ArrayList<EntitySearch>>() {
//            @Override
//            public void onResponse(Call<ArrayList<EntitySearch>> call, Response<ArrayList<EntitySearch>> response) {
//                entitySearches.clear();
//                entitySearches.addAll(response.body());
//            }
//            @Override
//            public void onFailure(Call<ArrayList<EntitySearch>> call, Throwable t) {
//                Toast.makeText(AutoGenerateFragment.this, "Invalid food!!!", Toast.LENGTH_SHORT).show();
//            }
//        });
//
//        final fooddotjson fooddotjson = new fooddotjson(1);
//        String[] uriTwo = fooddotjson.findIngredient(entitySearches);
//        fooddotjson.addIngredient(uriTwo);
//
//        DataMuseNutritionSearch apiFoodPackage = retrofit.create(DataMuseNutritionSearch.class);
//        final NutritionResponse nutritionResponse = apiFoodPackage.sendFood(fooddotjson, EdamamNutritionKeys.APP_ID_NUTRITION, EdamamNutritionKeys.APP_KEY_NUTRITION); //TODO check assignment
        //assuming this is returning a package with the FoodResponse object information

        //return inflater.inflate(R.layout.fragment_create, container, false); TODO Why do we need it here?

        //TODO Have the two possibilities for onClick
        //Randomly generate recipe
        autoGeneratedIngrs(view);

        //Create RecyclerView with foods displayed w/ EditText inputs
        ArrayList<NutritionResponse> nutritionResponses = new ArrayList<>();
        String input = inputIngrTextView.getText().toString();
        //TODO Caroline: where to start on Wednesday
        setRecyclerView(nutritionResponses);


    }

    private void wireWidgets(){
        //TODO wire widgets
        inputtedListLinLayout = findViewById(R.id.list_input_foods);
        inputCreateButton = findViewById(R.id.button_choice_create);
        randomGenButton = findViewById(R.id.button_auto_create);
        inputIngrTextView = findViewById(R.id.editText_ingr_input);
        recyclerView = findViewById(R.id.recyclerView); //TODO Why isn't recyclerView_foods showing up?
    }

    private void autoGeneratedIngrs(View view){
        //TODO Have APIs and set-ups for autocreate --> ONLY uses that as the list ingredients
        final RecipeGeneratorMethods recipeGeneratorMethods = new RecipeGeneratorMethods();
        ArrayList<ArrayList<String>> allFoods = recipeGeneratorMethods.listAllIngredients();
        /*
        TODO 1. Using foods chosen (specific #?) send each through database -DONE
        TODO 2. Get nutrient values we need -DONE --> Display in RF?
        TODO 3. Add them together
        TODO 4. Make recipe in format for recipe_layout.xml
        TODO 5. Display all information
         */

        //Tester
        ArrayList<NutritionResponse> nutritionResponses = new ArrayList<>();

        final ArrayList<EntitySearch> entitySearches = new ArrayList<>();
        final ArrayList<Hints> hintsAutoFill = new ArrayList<>();
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(DataMuseNutritionIngr.baseURL)
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        DataMuseNutritionIngr api = retrofit.create(DataMuseNutritionIngr.class);

        /*
        This part goes through all the database parts --> goes through all the things that are in the strings that are chosen
        then gets the information for each
        --> TODO maybe it should display a # from each then person can swipe to pick what ones they might want/not want?
        Displayed in Retrofit too?
         */
        int l = allFoods.size();
        for(int i = 0; i < 7; i++){
            for(int j = 0; i < l; j++){
                String foodSearched = allFoods.get(i).get(j); //what we want to search for --> gotten from TextEdit

                Call<ArrayList<EntitySearch>> callFirst = api.getIngrNutrient(foodSearched, EdamamNutritionKeys.APP_ID_NUTRITION, EdamamNutritionKeys.APP_KEY_NUTRITION);
                callFirst.enqueue(new Callback<ArrayList<EntitySearch>>() {
                    @Override
                    public void onResponse(Call<ArrayList<EntitySearch>> call, Response<ArrayList<EntitySearch>> response) {
                        entitySearches.clear();
                        entitySearches.addAll(response.body());
                    }

                    @Override
                    public void onFailure(Call<ArrayList<EntitySearch>> call, Throwable t) {
                        Toast.makeText(recipeGeneratorMethods, "DETECTED: Alien food. PROCEED: Code Red", Toast.LENGTH_SHORT).show();
                        System.exit(1);
                    }
                });
                int totalPages = entitySearches.get(i).getNumPages();

                for(int k = 0; k < totalPages; k++){
                    Call < ArrayList<Hints>> callSecond = api.getAllHints(foodSearched, k, EdamamNutritionKeys.APP_ID_NUTRITION, EdamamNutritionKeys.APP_KEY_NUTRITION);
                    callSecond.enqueue(new Callback<ArrayList<Hints>>() {
                        @Override
                        public void onResponse(Call<ArrayList<Hints>> call, Response<ArrayList<Hints>> response) {
                            hintsAutoFill.clear();
                            hintsAutoFill.addAll(response.body());
                        }

                        @Override
                        public void onFailure(Call<ArrayList<Hints>> call, Throwable t) {
                            Toast.makeText(recipeGeneratorMethods, "Uh oh. No hints for you.", Toast.LENGTH_SHORT).show();
                        }
                    });
                } //TODO This will be useful for suggestions + auto-fill
            }

            final fooddotjson fooddotjson = new fooddotjson(1);
            String[] uriTwo = fooddotjson.findIngredient(entitySearches.get(i));
            fooddotjson.addIngredient(uriTwo);

            DataMuseNutritionSearch apiFoodPackage = retrofit.create(DataMuseNutritionSearch.class);
            final NutritionResponse nutritionResponse = apiFoodPackage.sendFood(fooddotjson, EdamamNutritionKeys.APP_ID_NUTRITION, EdamamNutritionKeys.APP_KEY_NUTRITION);
            nutritionResponses.add(nutritionResponse); //up until here gets all nutrition NOT DONE!!!
        }


    }
/*
Intended to take a user's choices put into a recyclerView and generate a recipe --> maybe this needs to be in 1+ steps
 */
    private void userChoiceIngrs(View view){ //how do we do this
        //TODO have user have input into textEdits in RecyclerView and then uses that as a matching
        ArrayList<String> userIngrs = new ArrayList<>(); //to store strings we're matching
        RecipeGeneratorMethods recipeGeneratorMethods = new RecipeGeneratorMethods();
        recipeGeneratorMethods.getLists(); //sets raw xml to Strings
        recipeGeneratorMethods.sortIngredients(); //sees if it's in hard-coded lists
        for(int i = 0; i < 7; i++){
            if(i == 0){
                recipeGeneratorMethods.getCarbohydrates();
            }
        }

    }
/*
Creates recyclerView for user usage
 */
    private void setRecyclerView(ArrayList<NutritionResponse> nutritionResponses){
        //https://developer.android.com/guide/topics/ui/layout/recyclerview#java
        recyclerView.setHasFixedSize(true);
        layoutManager = new LinearLayoutManager(this);
        recyclerView.setLayoutManager(layoutManager);
        adapter = new InputFoodsAdapter(new ArrayList<NutritionResponse>(), new RecyclerViewOnClick() {
            @Override
            public void onClick(View v, int pos) {
                //stuff? TODO ?
            }
        });
        recyclerView.setAdapter(adapter);

        ViewGroup viewGroup = new ViewGroup(this) {
            @Override
            protected void onLayout(boolean b, int i, int i1, int i2, int i3) {

            }
        }; //check w/ Mr. Shorr
        int num = adapter.getItemCount();
        InputFoodsAdapter.MyViewHolder myViewHolder = (InputFoodsAdapter.MyViewHolder) adapter.onCreateViewHolder(viewGroup, num);
        adapter.bindViewHolder(myViewHolder, num);
    }
}
